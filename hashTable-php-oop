


<?php
class HashData
{
    private string $key;
    private string $value;
    
    public function __construct(string $key , string $value)
    {
        $this->key = $key;
        $this->value = $value;
    }
    
    public function getKey(): string
    {
        return $this->key;
    }
    
    public function getValue(): string
    {
        return $this->value;
    }
    
    public function setKey(string $key): void
    {
        $this->key = $key;
    }
    
    public function setValue(string $value): void
    {
        $this->value = $value;
    }
}

class HashTable
{
    public array $hashItems;
    private int $size;
   
    
    public function __construct(int $size =17)
    {
        $this->size = $size;
        $this->hashItems = array_fill(0, $size, []);
    }
    
    private function hashFunction(string $key) : int
    {
        $hash = 0;
        $len = strlen($key);
        for($i = 0; $i < $len ; $i++)
        {
            $hash += ord($key[$i]);
        }
        return $hash % $this->size;
  
    }
    
    
    public function setItem(string $key,string $value) : void
    {   
        
        $newHash = new HashData($key, $value);
        $index = $this->hashFunction($key);
        
         if (isset($this->hashItems[$index][$key])) 
         {
            echo "Duplicated Data!\n";
            return;
        }
       
        $this->hashItems[$index][$key] = $newHash;
        echo "Data inserted !\n";
    
    }

    
    public function getItem(string $key) : void 
    {
        $index = $this->hashFunction($key);
  
        if(isset($this->hashItems[$index][$key])) 
        {
            echo "Value :".$this->hashItems[$index][$key]->getValue()."\n";
            return;
            
        }  
        
        echo "No matching Key !\n";
        return;
        
    }
    
    public function deleteItem(string $key) : void
    {
        $index = $this->hashFunction($key);
       
        if(isset($this->hashItems[$index][$key])) 
        {
            unset($this->hashItems[$index][$key]);
            echo "Data Deleted !\n";
            return;
        }  
        
        echo "No matching Key !\n";
        return;
    }
    
    public function updateItem(string $key , string $value) : void
    {
        $index =$this->hashFunction($key);
        
        if( isset($this->hashItems[$index][$key]))
        {
            $newHash = new HashData($key,$value);
            $this->hashItems[$index][$key] = $newHash;
            echo "Value updated !\n";
            return;
        }
        
        echo "Invalid credentials \n";
    }
    
    
}

class HashCommandLine
{
    private HashTable $hashTable;
    
    public function __construct(HashTable $hashTable)
    {
        $this->hashTable = $hashTable;
    }
    
    public function showMainMessage()
    {
        echo "\n1.Insert data \n2.Delete data \n3.Find data \n4.Update data \n";
    }
    
    public function showMessage(string $message): void
    {
        echo $message;
    }
    
    public function getAnswer(string $message): string
    {
        $ans = readline($message);
        return $ans;
    }
    
    public function startFlow() 
    {
        $this->showMainMessage();
        $a = $this->getAnswer("");
        
        switch($a)
        {
            case 1:
                $key = $this->getAnswer("Enter Key : ");
                $val = $this->getAnswer("Enter Value : ");
                $this->hashTable->setItem($key,$val);
                break;
            case 2:
                $key = $this->getAnswer("Enter Key : ");
                $this->hashTable->deleteItem($key);
                break;
            case 3:
                $key = $this->getAnswer("Enter Key : ");
                $this->hashTable->getItem($key);
                break;
            case 4:
                $key =$this->getAnswer("Enter Key : ");
                $val =$this->getAnswer("Enter New Value : ");
                $this->hashTable->updateItem($key,$val);
                break;
        }
       $this->startFlow(); 
    }
}

$hTable = new HashTable();
$hCommandLine = new HashCommandLine($hTable);
$hCommandLine->startFlow();
?>
